# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TransitionDockWidget
                                 A QGIS plugin
 truc
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Transition
        email                : Transition
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import geojson

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsVectorLayer, QgsProject

from .import_path import return_lib_path
sys.path.append(return_lib_path())
from transition_api_lib import TransitionLib

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'transition_qgis_dockwidget_base.ui'))


class TransitionDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(TransitionDockWidget, self).__init__(parent)
        self.transition_lib = TransitionLib()
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # Connect the buttons
        self.pathsButton.clicked.connect(self.on_pathButton_clicked)
        self.sceanriosButton.clicked.connect(self.on_scenarioButton_clicked)
        self.routingButton.clicked.connect(self.on_routingButton_clicked)
        self.nodesButton.clicked.connect(self.on_nodeButton_clicked)
        self.resetButton.clicked.connect(self.on_resetButton_clicked)


    def on_pathButton_clicked(self):
        self.plainTextEdit.setPlainText("Getting the paths...")
        geojson_data = self.transition_lib.get_transition_paths()
        if geojson_data:
            layer = QgsVectorLayer(geojson.dumps(geojson_data), "transition_paths", "ogr")
            if not layer.isValid():
                print("Layer failed to load!")
                return
            QgsProject.instance().addMapLayer(layer)
        else:
            print("Failed to get GeoJSON data")

    
    def on_nodeButton_clicked(self):
        self.plainTextEdit.setPlainText("Getting the nodes...")
        geojson_data = self.transition_lib.get_transition_nodes()
        if geojson_data:
            layer = QgsVectorLayer(geojson.dumps(geojson_data), "transition_nodes", "ogr")
            if not layer.isValid():
                print("Layer failed to load!")
                return
            QgsProject.instance().addMapLayer(layer)
        else:
            print("Failed to get GeoJSON data")


    def on_scenarioButton_clicked(self):
        self.plainTextEdit.setPlainText("Getting the scenarios...")
        result = self.transition_lib.get_transition_scenarios()
        if result:
            # not sure what to do with the result yet, just print it out for now
            self.plainTextEdit.appendPlainText(result.text)
        else:
            print("Failed to get scenarios")


    def on_routingButton_clicked(self):
        self.plainTextEdit.setPlainText("Getting the routing modes ...")
        routing_modes = self.transition_lib.get_transition_routing_modes()
        if routing_modes:
            # print out the routing modes, we'll probably be using these in a drop down list but for now just print them out
            for mode in routing_modes:
                self.plainTextEdit.appendPlainText(mode)
        else:
            print("Failed to get routing modes")

    def on_resetButton_clicked(self):
        self.plainTextEdit.clear()

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

